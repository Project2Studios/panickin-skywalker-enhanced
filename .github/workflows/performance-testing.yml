name: Performance Testing & Quality Assurance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run nightly performance tests
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  PERFORMANCE_BUDGET_PERFORMANCE: 90
  PERFORMANCE_BUDGET_ACCESSIBILITY: 90
  PERFORMANCE_BUDGET_SEO: 90
  PERFORMANCE_BUDGET_LCP: 2500
  PERFORMANCE_BUDGET_FID: 100
  PERFORMANCE_BUDGET_CLS: 0.1

jobs:
  # Code Quality and Unit Tests
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run check

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  # Security Testing
  security-audit:
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run security audit
        run: BASE_URL=http://localhost:3000 npm run security:audit

      - name: Upload security report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report
          path: security-report.json

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: quality-check
    strategy:
      matrix:
        test-type: [lighthouse-mobile, lighthouse-desktop, load-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run Lighthouse audit (Mobile)
        if: matrix.test-type == 'lighthouse-mobile'
        run: |
          BASE_URL=http://localhost:3000 \
          npx tsx tests/performance/lighthouse-audit.ts mobile ./lighthouse-reports
        env:
          CI: true

      - name: Run Lighthouse audit (Desktop)
        if: matrix.test-type == 'lighthouse-desktop'
        run: |
          BASE_URL=http://localhost:3000 \
          npx tsx tests/performance/lighthouse-audit.ts desktop ./lighthouse-reports
        env:
          CI: true

      - name: Run load test
        if: matrix.test-type == 'load-test'
        run: BASE_URL=http://localhost:3000 npm run test:load moderate

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-reports-${{ matrix.test-type }}
          path: lighthouse-reports/

  # End-to-End Testing
  e2e-test:
    runs-on: ubuntu-latest
    needs: quality-check
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: test-results/

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/

  # Visual Regression Testing
  visual-test:
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000

      - name: Wait for application
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run visual regression tests
        run: npx playwright test --project=chromium --grep="visual"

      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-test-results
          path: test-results/

  # Performance Budget Check
  performance-budget:
    runs-on: ubuntu-latest
    needs: performance-test
    if: always()
    steps:
      - name: Download performance reports
        uses: actions/download-artifact@v3
        with:
          name: performance-reports-lighthouse-mobile
          path: ./reports

      - name: Check performance budget
        run: |
          # Extract Lighthouse scores from reports
          PERFORMANCE_SCORE=$(grep -o '"performance":[0-9]*' ./reports/lighthouse-summary-*.json | head -1 | cut -d':' -f2)
          ACCESSIBILITY_SCORE=$(grep -o '"accessibility":[0-9]*' ./reports/lighthouse-summary-*.json | head -1 | cut -d':' -f2)
          SEO_SCORE=$(grep -o '"seo":[0-9]*' ./reports/lighthouse-summary-*.json | head -1 | cut -d':' -f2)
          
          echo "Performance Score: $PERFORMANCE_SCORE"
          echo "Accessibility Score: $ACCESSIBILITY_SCORE"
          echo "SEO Score: $SEO_SCORE"
          
          # Check against budgets
          if [ "$PERFORMANCE_SCORE" -lt "$PERFORMANCE_BUDGET_PERFORMANCE" ]; then
            echo "❌ Performance score below budget: $PERFORMANCE_SCORE < $PERFORMANCE_BUDGET_PERFORMANCE"
            exit 1
          fi
          
          if [ "$ACCESSIBILITY_SCORE" -lt "$PERFORMANCE_BUDGET_ACCESSIBILITY" ]; then
            echo "❌ Accessibility score below budget: $ACCESSIBILITY_SCORE < $PERFORMANCE_BUDGET_ACCESSIBILITY"
            exit 1
          fi
          
          if [ "$SEO_SCORE" -lt "$PERFORMANCE_BUDGET_SEO" ]; then
            echo "❌ SEO score below budget: $SEO_SCORE < $PERFORMANCE_BUDGET_SEO"
            exit 1
          fi
          
          echo "✅ All performance budgets passed!"

  # Bundle Size Check
  bundle-size-check:
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        run: |
          npm run build
          npx bundlesize

      - name: Bundle size report
        run: |
          echo "## Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Limit | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          # Check main bundle size
          BUNDLE_SIZE=$(stat -f%z dist/public/js/index-*.js 2>/dev/null || stat -c%s dist/public/js/index-*.js)
          BUNDLE_SIZE_KB=$((BUNDLE_SIZE / 1024))
          
          if [ "$BUNDLE_SIZE_KB" -gt 500 ]; then
            echo "| Main Bundle | ${BUNDLE_SIZE_KB}KB | 500KB | ❌ |" >> $GITHUB_STEP_SUMMARY
            echo "❌ Bundle size exceeds limit: ${BUNDLE_SIZE_KB}KB > 500KB"
            exit 1
          else
            echo "| Main Bundle | ${BUNDLE_SIZE_KB}KB | 500KB | ✅ |" >> $GITHUB_STEP_SUMMARY
          fi

  # Deployment Ready Check
  deployment-ready:
    runs-on: ubuntu-latest
    needs: [quality-check, security-audit, performance-test, e2e-test, performance-budget, bundle-size-check]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Quality Check: ${{ needs.quality-check.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Performance Test: ${{ needs.performance-test.result }}"
          echo "E2E Test: ${{ needs.e2e-test.result }}"
          echo "Performance Budget: ${{ needs.performance-budget.result }}"
          echo "Bundle Size Check: ${{ needs.bundle-size-check.result }}"
          
          # Check if any critical job failed
          if [[ "${{ needs.quality-check.result }}" == "failure" ]] || \
             [[ "${{ needs.security-audit.result }}" == "failure" ]] || \
             [[ "${{ needs.performance-budget.result }}" == "failure" ]] || \
             [[ "${{ needs.bundle-size-check.result }}" == "failure" ]]; then
            echo "❌ Critical checks failed - not ready for deployment"
            exit 1
          fi
          
          # Check if performance or E2E tests failed
          if [[ "${{ needs.performance-test.result }}" == "failure" ]] || \
             [[ "${{ needs.e2e-test.result }}" == "failure" ]]; then
            echo "⚠️ Performance or E2E tests failed - review before deployment"
            exit 1
          fi
          
          echo "✅ All checks passed - ready for deployment!"

      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.quality-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Budget | ${{ needs.performance-budget.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Bundle Size | ${{ needs.bundle-size-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY

  # Nightly Performance Monitoring
  nightly-monitoring:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive performance audit
        run: |
          # Run all performance tests
          npm run performance:audit
          npm run test:load moderate
          
      - name: Generate performance report
        run: |
          echo "# Nightly Performance Report - $(date)" > performance-report.md
          echo "## Summary" >> performance-report.md
          echo "- Load test completed successfully" >> performance-report.md
          echo "- Performance audit completed" >> performance-report.md
          
      - name: Upload nightly report
        uses: actions/upload-artifact@v3
        with:
          name: nightly-performance-report
          path: performance-report.md